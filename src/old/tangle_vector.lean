import algebra.category.Module.basic
import linear_algebra.tensor_product
import linear_algebra.dual
import Tangle

variables (K: Type) [field K]

namespace Tangle

@[simp] def to_module: Tangle ‚Üí Module K
  | id := Module.of K K
  | (of x) := if x then Module.of K (fin 2 ‚Üí K) else Module.of K (module.dual K (fin 2 ‚Üí K))
  | (tensor a b) := Module.of K (tensor_product K a.to_module b.to_module)

end Tangle

@[simp] def functor_map: Œ† {X Y: Tangle}, (X ‚ü∂·µê Y) ‚Üí (X.to_module K ‚ü∂ Y.to_module K)
  | _ _ (ùüô a) := linear_map.id
  | _ _ (f ‚â´ g) := functor_map g ‚àò‚Çó functor_map f
  | _ _ (f ‚äó·µê g) := tensor_product.map (functor_map f) (functor_map g)
  | _ _ (Œ± a b c) := begin
    have f := tensor_product.assoc K (a.to_module K) (b.to_module K) (c.to_module K),
    exact Module.of_hom f.to_linear_map,
  end
  | _ _ (Œ±‚Åª¬π a b c) := begin
    have f := tensor_product.assoc K (a.to_module K) (b.to_module K) (c.to_module K),
    exact Module.of_hom f.symm.to_linear_map,
  end
  | _ _ (‚Ñì a) := begin
    have f := tensor_product.lid K (a.to_module K),
    exact Module.of_hom f.to_linear_map,
  end
  | _ _ (‚Ñì‚Åª¬π a) := begin
    have f := tensor_product.lid K (a.to_module K),
    exact Module.of_hom f.symm.to_linear_map,
  end
  | _ _ (œÅ a) := begin
    have f := tensor_product.rid K (a.to_module K),
    exact Module.of_hom f.to_linear_map,
  end
  | _ _ (œÅ‚Åª¬π a) := begin
    have f := tensor_product.rid K (a.to_module K),
    exact Module.of_hom f.symm.to_linear_map,
  end
  | _ _ (Œµ a) := sorry  -- FinVect „Åò„ÇÉ„Å™„ÅÑ„ÅÆ„ÅßÁÑ°ÁêÜ
  | _ _ (Œ∑ a) := sorry
  | _ _ (Œ≤ a b) := sorry
  | _ _ (Œ≤‚Åª¬π a b) := sorry

def functor_tangle: Tangle ‚•§ Module K := {
  obj := Tangle.to_module K,
  map := begin rintro X Y ‚ü®f‚ü©, exact ‚ü¶functor_map K f‚üß, end,
}
