import braid.Braid
import algebra.category.FinVect

variables (K: Type) [field K]

def K_2: Module K := Module.of K (fin 2 ‚Üí K)
noncomputable def std_basis_K_2 := pi.basis_fun K (fin 2)

def FinVect_K_2: FinVect K := ‚ü®
  K_2 K,
  by change finite_dimensional K (fin 2 ‚Üí K); apply_instance
‚ü©
def FinVect_tensor (X Y: FinVect K): FinVect K := ‚ü®
  Module.of K (tensor_product K X Y),
  by change finite_dimensional K (tensor_product K X Y); apply_instance
‚ü©
local infix ` ‚äó·∂† `: 50 := FinVect_tensor K

namespace Braid
  @[simp] def toFinVect: Braid ‚Üí FinVect K
    | ‚Üì := FinVect_K_2 K
    | (X ‚äó·µó Y) := X.toFinVect ‚äó·∂† Y.toFinVect
end Braid

def matrix_braiding (q: units K): matrix (fin 4) (fin 4) K := ![
  ![q^(1/2), 0, 0, 0],
  ![0, 0, q, 0],
  ![0, q, q^(1/2)-q^(3/2), 0],
  ![0, 0, 0, q^(1/2)]
]
def mat_braiding_aux: fin 2 √ó fin 2 ‚Üí fin 4 := Œª ‚ü®x, y‚ü©, 2*x+y

noncomputable def map_braiding (q: units K): FinVect_K_2 K ‚äó·∂† FinVect_K_2 K ‚ü∂ FinVect_K_2 K ‚äó·∂† FinVect_K_2 K := begin
    have b := pi.basis_fun K (fin 2),
    have b2 := basis.tensor_product b b,
    have m := Œª x y, matrix_braiding K q (mat_braiding_aux x) (mat_braiding_aux y),
    exact matrix.to_lin b2 b2 m,
end

noncomputable def functor_map (q: units K): Œ† {X Y: Braid}, (X ‚ü∂·µê Y) ‚Üí (X.toFinVect K ‚ü∂ Y.toFinVect K)
  | _ _ ùüô := linear_map.id
  | _ _ (f ‚â´ g) := functor_map g ‚àò‚Çó functor_map f
  | _ _ (f ‚äó·µê g) := tensor_product.map (functor_map f) (functor_map g)
  | _ _ (Œ± a b c) := begin
    have f := tensor_product.assoc K (a.toFinVect K) (b.toFinVect K) (c.toFinVect K),
    exact Module.of_hom f.to_linear_map,
  end
  | _ _ (Œ±‚Åª¬π a b c) := begin
    have f := tensor_product.assoc K (a.toFinVect K) (b.toFinVect K) (c.toFinVect K),
    exact Module.of_hom f.symm.to_linear_map,
  end
  | _ _ Œ≤ := map_braiding K q
  | _ _ Œ≤‚Åª¬π := map_braiding K q -- uso

def functor (q: units K): Braid ‚•§ FinVect K := {
  obj := Braid.toFinVect K,
  map := begin
    rintro X Y f,
    refine functor_map K q _, induction f with _ f g hfg, assumption,
    
  end
}